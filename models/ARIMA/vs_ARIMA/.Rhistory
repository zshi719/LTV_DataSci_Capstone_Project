df_weekly_ret %>%
filter(symbol %in% randomly_selected_stocks$stock) %>%
arrange(symbol, date) %>%
group_by(symbol) %>%
pivot_wider(id_cols = date, names_from = symbol, values_from = adjusted)
#create a portfolio from stocks selected from each cluster group
portfolio_1 <-
df_weekly_ret %>%
filter(symbol %in% randomly_selected_stocks$stock) %>%
arrange(symbol, date) %>%
group_by(symbol) %>%
pivot_wider(id_cols = date, names_from = symbol, values_from = adjusted)
df_weekly_ret %>%
filter(symbol %in% randomly_selected_stocks$stock)
#create a portfolio from stocks selected from each cluster group
portfolio_1 <-
df_weekly_ret %>%
base::filter(symbol %in% randomly_selected_stocks$stock) %>%
arrange(symbol, date) %>%
group_by(symbol) %>%
pivot_wider(id_cols = date, names_from = symbol, values_from = adjusted)
#create a portfolio from stocks selected from each cluster group
portfolio_1 <-
df_weekly_ret %>%
base::filter(symbol %in% randomly_selected_stocks$stock) %>%
arrange(symbol, date) %>%
group_by(symbol) %>%
pivot_wider(id_cols = date, names_from = symbol, values_from = adjusted)
# Load necessary libraries
library(dplyr)
library(tidyverse)
library(tidyr)
library(janitor)
library(lubridate)
library(rvest)
library(magrittr)
library(quantmod)
library(tidyquant)
library(PerformanceAnalytics)
library(dendextend)
library(RColorBrewer)
library(factoextra)
library(cluster)
library(xts)
library(TTR)
conflicted::conflicts_prefer(dplyr::filter)
library(crypto2)
conflicted::conflict_prefer('select', 'dplyr')
pal <- palette(brewer.pal(8, "Accent"))
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
df <- read.csv("ne_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
confirmed
autoplot(confirmed) +
ylab("Retail index") +
xlab("Week")
confirmed %>% diff(lag = 7) %>% ggtsdisplay()
confirmed %>%
diff(lag = 7) %>%
diff() %>%
ggtsdisplay()
fit1 <- Arima(confirmed, order = c(0, 1, 2), seasonal = c(0, 1, 1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
fit2 <- Arima(confirmed, order = c(2, 1, 2), seasonal = c(0, 0, 1))
checkresiduals(fit2)
df_test <- read.csv("ne_test.csv", row.names = 1)
confirmed_test <- ts(df_test$confirmed, start = c(31, 6), frequency = 7)
confirmed_test
fit2 %>% forecast(h = 48) %>% autoplot()
pred <- data.frame(forecast(fit2, h = 48))[, 1]
# RMSE
sqrt(mean((pred - confirmed_test)^2))
log_confirmed <- log(confirmed + 1)
auto.arima(log_confirmed, seasonal = TRUE)
fit3 <- arima(log_confirmed, order = c(2, 2, 2))
checkresiduals(fit3)
# make predictions
pred3 <- exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# RMSE
sqrt(mean((pred3 - confirmed_test)^2))
# make predictions
pred3 <- exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# RMSE
sqrt(mean((pred3 - confirmed_test)^2))
df_sub <- df %>%
select(confirmed, daily_state_test, precipitation, temperature, weekend)
df_sub %>% GGally::ggpairs()
# Loading time series data and predictors
df_sub$confirmed <- ts(df_sub$confirmed, start = c(4, 4), frequency = 7)
df_sub$daily_state_test <- ts(df_sub$daily_state_test, start = c(4, 4), frequency = 7)
df_sub$precipitation <- ts(df_sub$precipitation, start = c(4, 4), frequency = 7)
df_sub$temperature <- ts(df_sub$temperature, start = c(4, 4), frequency = 7)
attach(df_sub)
# fit will all exogenous variables available
multi.fit1 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation, temperature, weekend))
summary(multi.fit1)
checkresiduals(multi.fit1)
multi.fit2 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation, temperature))
multi.fit3 <- auto.arima(confirmed, xreg = cbind(precipitation, temperature))
multi.fit4 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation))
multi.fit5 <- auto.arima(confirmed, xreg = cbind(precipitation))
data.frame(
model = c("multi.fit1", "multi.fit2", "multi.fit3", "multi.fit4", "multi.fit5"),
AIC = c(multi.fit1$aic, multi.fit2$aic, multi.fit3$aic, multi.fit4$aic, multi.fit5$aic),
BIC = c(multi.fit1$bic, multi.fit2$bic, multi.fit3$bic, multi.fit4$bic, multi.fit5$bic))
checkresiduals(multi.fit2)$p.value
checkresiduals(multi.fit3)$p.value
checkresiduals(multi.fit4)$p.value
checkresiduals(multi.fit5)$p.value
fitted_confirmed <- fitted(multi.fit5)
confirmed_df <- data.frame(
time = 1:length(confirmed),
value = c(confirmed, fitted_confirmed),
type = c(rep("true", length(confirmed)), rep("forecasts", length(fitted_confirmed)))
)
ggplot(confirmed_df, aes(x = time, y = value, col = as.factor(type))) +
geom_line(size = 0.75) +
labs(y = "Y", x = "Time",
title = "Fitted values against actual, 01/22/2020 - 07/30/2020") +
theme(axis.title = element_text(family = "serif"),
plot.title = element_text(hjust = 0.5, size = 12, family = "serif", face = "bold"),
legend.position = c(0.85, 0.2),
legend.title = element_blank(),
legend.text = element_text(family = "serif", face = "bold"),
legend.key = element_rect(color = "transparent"),
legend.background = element_rect(fill = "lightgrey")) +
scale_color_discrete(name = "Lead", labels = c("Forecast", " Actual Value"))
pred.fit5 <- data.frame(forecast(multi.fit5, xreg = df_test$precipitation))[, 1]
# RMSE
sqrt(mean((pred.fit5 - confirmed_test)^2))
pred_df <- data.frame(
time = 1:length(df_test$confirmed),
value = c(df_test$confirmed, pred.fit5),
type = c(rep("true", length(df_test$confirmed)), rep("forecasts", length(pred.fit5)))
)
ggplot(pred_df, aes(x = time, y = value, col = as.factor(type))) +
geom_line(size = 0.75) +
labs(y = "Y", x = "Time",
title = "Forecast values against actual, 07/31/2020 - 09/16/2020") +
theme(axis.title = element_text(family = "serif"),
plot.title = element_text(hjust = 0.5, size = 12, family = "serif", face = "bold"),
legend.position = c(0.85, 0.2),
legend.title = element_blank(),
legend.text = element_text(family = "serif", face = "bold"),
legend.key = element_rect(color = "transparent"),
legend.background = element_rect(fill = "lightgrey")) +
scale_color_discrete(name = "Lead", labels = c("Forecast", " Actual Value"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggfortify)
library(forecast)
df = read.csv("ne_train.csv", row.names = 1)
df[df$confirmed>0, ] ## 2020-02-01
confirmed <- ts(df$confirmed, start = c(4,4), frequency = 7)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggfortify)
library(forecast)
df = read.csv("ne_train.csv", row.names = 1)
df[df$confirmed>0, ] ## 2020-02-01
confirmed <- ts(df$confirmed, start = c(4,4), frequency = 7)
autoplot(confirmed) + ylab("Retail index") + xlab("Week")
confirmed %>% diff(lag=7) %>% ggtsdisplay()
confirmed %>% diff(lag=7) %>% diff() %>% ggtsdisplay()
fit1 <- Arima(confirmed, order=c(0,1,2), seasonal = c(0,1,1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
fit2 <- Arima(confirmed, order=c(2,1,2), seasonal = c(0,0,1))
checkresiduals(fit2)
df_test <- read.csv("ne_test.csv", row.names = 1)
confirmed_test <- ts(df_test$confirmed, start = c(31,6), frequency = 7)
confirmed_test
fit2 %>% forecast(h=48) %>% autoplot()
pred = data.frame(forecast(fit2, h=48))[,1]
# RMSE
sqrt(mean((pred-confirmed_test)^2))
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
df <- read.csv("ne_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
confirmed
autoplot(confirmed) +
ylab("Retail index") +
xlab("Week")
confirmed %>% diff(lag = 7) %>% ggtsdisplay()
confirmed %>%
diff(lag = 7) %>%
diff() %>%
ggtsdisplay()
fit1 <- Arima(confirmed, order = c(0, 1, 2), seasonal = c(0, 1, 1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
fit2 <- Arima(confirmed, order = c(2, 1, 2), seasonal = c(0, 0, 1))
checkresiduals(fit2)
df_test <- read.csv("ne_test.csv", row.names = 1)
confirmed_test <- ts(df_test$confirmed, start = c(31, 6), frequency = 7)
confirmed_test
fit2 %>% forecast(h = 48) %>% autoplot()
pred <- data.frame(forecast(fit2, h = 48))[, 1]
# RMSE
sqrt(mean((pred - confirmed_test)^2))
log_confirmed <- log(confirmed + 1)
auto.arima(log_confirmed, seasonal = TRUE)
fit3 <- arima(log_confirmed, order = c(2, 2, 2))
checkresiduals(fit3)
# make predictions
pred3 <- exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# RMSE
sqrt(mean((pred3 - confirmed_test)^2))
df_sub <- df %>%
select(confirmed, daily_state_test, precipitation, temperature, weekend)
df_sub %>% GGally::ggpairs()
# Loading time series data and predictors
df_sub$confirmed <- ts(df_sub$confirmed, start = c(4, 4), frequency = 7)
df_sub$daily_state_test <- ts(df_sub$daily_state_test, start = c(4, 4), frequency = 7)
df_sub$precipitation <- ts(df_sub$precipitation, start = c(4, 4), frequency = 7)
df_sub$temperature <- ts(df_sub$temperature, start = c(4, 4), frequency = 7)
attach(df_sub)
# fit will all exogenous variables available
multi.fit1 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation, temperature, weekend))
summary(multi.fit1)
checkresiduals(multi.fit1)
multi.fit2 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation, temperature))
multi.fit3 <- auto.arima(confirmed, xreg = cbind(precipitation, temperature))
multi.fit4 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation))
multi.fit5 <- auto.arima(confirmed, xreg = cbind(precipitation))
data.frame(
model = c("multi.fit1", "multi.fit2", "multi.fit3", "multi.fit4", "multi.fit5"),
AIC = c(multi.fit1$aic, multi.fit2$aic, multi.fit3$aic, multi.fit4$aic, multi.fit5$aic),
BIC = c(multi.fit1$bic, multi.fit2$bic, multi.fit3$bic, multi.fit4$bic, multi.fit5$bic))
checkresiduals(multi.fit2)$p.value
checkresiduals(multi.fit3)$p.value
checkresiduals(multi.fit4)$p.value
checkresiduals(multi.fit5)$p.value
fitted_confirmed <- fitted(multi.fit5)
confirmed_df <- data.frame(
time = 1:length(confirmed),
value = c(confirmed, fitted_confirmed),
type = c(rep("true", length(confirmed)), rep("forecasts", length(fitted_confirmed)))
)
ggplot(confirmed_df, aes(x = time, y = value, col = as.factor(type))) +
geom_line(size = 0.75) +
labs(y = "Y", x = "Time",
title = "Fitted values against actual, 01/22/2020 - 07/30/2020") +
theme(axis.title = element_text(family = "serif"),
plot.title = element_text(hjust = 0.5, size = 12, family = "serif", face = "bold"),
legend.position = c(0.85, 0.2),
legend.title = element_blank(),
legend.text = element_text(family = "serif", face = "bold"),
legend.key = element_rect(color = "transparent"),
legend.background = element_rect(fill = "lightgrey")) +
scale_color_discrete(name = "Lead", labels = c("Forecast", " Actual Value"))
pred.fit5 <- data.frame(forecast(multi.fit5, xreg = df_test$precipitation))[, 1]
# RMSE
sqrt(mean((pred.fit5 - confirmed_test)^2))
pred_df <- data.frame(
time = 1:length(df_test$confirmed),
value = c(df_test$confirmed, pred.fit5),
type = c(rep("true", length(df_test$confirmed)), rep("forecasts", length(pred.fit5)))
)
ggplot(pred_df, aes(x = time, y = value, col = as.factor(type))) +
geom_line(size = 0.75) +
labs(y = "Y", x = "Time",
title = "Forecast values against actual, 07/31/2020 - 09/16/2020") +
theme(axis.title = element_text(family = "serif"),
plot.title = element_text(hjust = 0.5, size = 12, family = "serif", face = "bold"),
legend.position = c(0.85, 0.2),
legend.title = element_blank(),
legend.text = element_text(family = "serif", face = "bold"),
legend.key = element_rect(color = "transparent"),
legend.background = element_rect(fill = "lightgrey")) +
scale_color_discrete(name = "Lead", labels = c("Forecast", " Actual Value"))
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
df <- read.csv("ne_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
confirmed
autoplot(confirmed) +
ylab("Retail index") +
xlab("Week")
confirmed %>% diff(lag = 7) %>% ggtsdisplay()
confirmed %>%
diff(lag = 7) %>%
diff() %>%
ggtsdisplay()
fit1 <- Arima(confirmed, order = c(0, 1, 2), seasonal = c(0, 1, 1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
fit2 <- Arima(confirmed, order = c(2, 1, 2), seasonal = c(0, 0, 1))
checkresiduals(fit2)
df_test <- read.csv("ne_test.csv", row.names = 1)
confirmed_test <- ts(df_test$confirmed, start = c(31, 6), frequency = 7)
confirmed_test
fit2 %>% forecast(h = 48) %>% autoplot()
pred <- data.frame(forecast(fit2, h = 48))[, 1]
# RMSE
sqrt(mean((pred - confirmed_test)^2))
log_confirmed <- log(confirmed + 1)
auto.arima(log_confirmed, seasonal = TRUE)
fit3 <- arima(log_confirmed, order = c(2, 2, 2))
checkresiduals(fit3)
# make predictions
pred3 <- exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# RMSE
sqrt(mean((pred3 - confirmed_test)^2))
df_sub <- df %>%
select(confirmed, daily_state_test, precipitation, temperature, weekend)
df_sub %>% GGally::ggpairs()
# Loading time series data and predictors
df_sub$confirmed <- ts(df_sub$confirmed, start = c(4, 4), frequency = 7)
df_sub$daily_state_test <- ts(df_sub$daily_state_test, start = c(4, 4), frequency = 7)
df_sub$precipitation <- ts(df_sub$precipitation, start = c(4, 4), frequency = 7)
df_sub$temperature <- ts(df_sub$temperature, start = c(4, 4), frequency = 7)
attach(df_sub)
# fit will all exogenous variables available
multi.fit1 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation, temperature, weekend))
summary(multi.fit1)
checkresiduals(multi.fit1)
multi.fit2 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation, temperature))
multi.fit3 <- auto.arima(confirmed, xreg = cbind(precipitation, temperature))
multi.fit4 <- auto.arima(confirmed, xreg = cbind(daily_state_test, precipitation))
multi.fit5 <- auto.arima(confirmed, xreg = cbind(precipitation))
data.frame(
model = c("multi.fit1", "multi.fit2", "multi.fit3", "multi.fit4", "multi.fit5"),
AIC = c(multi.fit1$aic, multi.fit2$aic, multi.fit3$aic, multi.fit4$aic, multi.fit5$aic),
BIC = c(multi.fit1$bic, multi.fit2$bic, multi.fit3$bic, multi.fit4$bic, multi.fit5$bic))
checkresiduals(multi.fit2)$p.value
checkresiduals(multi.fit3)$p.value
checkresiduals(multi.fit4)$p.value
checkresiduals(multi.fit5)$p.value
fitted_confirmed <- fitted(multi.fit5)
confirmed_df <- data.frame(
time = 1:length(confirmed),
value = c(confirmed, fitted_confirmed),
type = c(rep("true", length(confirmed)), rep("forecasts", length(fitted_confirmed)))
)
ggplot(confirmed_df, aes(x = time, y = value, col = as.factor(type))) +
geom_line(size = 0.75) +
labs(y = "Y", x = "Time",
title = "Fitted values against actual, 01/22/2020 - 07/30/2020") +
theme(axis.title = element_text(family = "serif"),
plot.title = element_text(hjust = 0.5, size = 12, family = "serif", face = "bold"),
legend.position = c(0.85, 0.2),
legend.title = element_blank(),
legend.text = element_text(family = "serif", face = "bold"),
legend.key = element_rect(color = "transparent"),
legend.background = element_rect(fill = "lightgrey")) +
scale_color_discrete(name = "Lead", labels = c("Forecast", " Actual Value"))
pred.fit5 <- data.frame(forecast(multi.fit5, xreg = df_test$precipitation))[, 1]
# RMSE
sqrt(mean((pred.fit5 - confirmed_test)^2))
pred_df <- data.frame(
time = 1:length(df_test$confirmed),
value = c(df_test$confirmed, pred.fit5),
type = c(rep("true", length(df_test$confirmed)), rep("forecasts", length(pred.fit5)))
)
ggplot(pred_df, aes(x = time, y = value, col = as.factor(type))) +
geom_line(size = 0.75) +
labs(y = "Y", x = "Time",
title = "Forecast values against actual, 07/31/2020 - 09/16/2020") +
theme(axis.title = element_text(family = "serif"),
plot.title = element_text(hjust = 0.5, size = 12, family = "serif", face = "bold"),
legend.position = c(0.85, 0.2),
legend.title = element_blank(),
legend.text = element_text(family = "serif", face = "bold"),
legend.key = element_rect(color = "transparent"),
legend.background = element_rect(fill = "lightgrey")) +
scale_color_discrete(name = "Lead", labels = c("Forecast", " Actual Value"))
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
df = read.csv("ne_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
confirmed
autoplot(confirmed) +
ylab("Retail index") +
xlab("Week")
confirmed %>% diff(lag = 7) %>% ggtsdisplay()
confirmed %>%
diff(lag = 7) %>%
diff() %>%
ggtsdisplay()
fit1 <- Arima(confirmed, order = c(0, 1, 2), seasonal = c(0, 1, 1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
fit2 <- Arima(confirmed, order = c(2, 1, 2), seasonal = c(0, 0, 1))
checkresiduals(fit2)
df_test <- read.csv("ne_test.csv", row.names = 1)
confirmed_test <- ts(df_test$confirmed, start = c(31, 6), frequency = 7)
confirmed_test
fit2 %>% forecast(h = 48) %>% autoplot()
pred = data.frame(forecast(fit2, h = 48))[, 1]
# RMSE
sqrt(mean((pred - confirmed_test)^2))
df_south = read.csv("s_train.csv", row.names = 1)
df_south_test = read.csv("s_test.csv", row.names = 1)
confirmed_south <- ts(df_south$confirmed, start = c(4, 4), frequency = 7)
df_south = read.csv("s_train.csv", row.names = 1)
df_south_test = read.csv("s_test.csv", row.names = 1)
confirmed_south <- ts(df_south$confirmed, start = c(4, 4), frequency = 7)
```{r}
log_confirmed <- log(confirmed + 1)
auto.arima(log_confirmed, seasonal = TRUE)
fit3 <- arima(log_confirmed, order = c(2, 2, 2))
checkresiduals(fit3)
# make predictions
pred3 = exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# make predictions
pred3 = exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# RMSE
sqrt(mean((pred3 - confirmed_test)^2))
mean(abs(pred3 - confirmed_test))
mean(abs(pred3 - confirmed_test))
# make predictions
pred3 = exp(data.frame(forecast(fit3, h = 48))[, 1]) - 1
# RMSE
sqrt(mean((pred3 - confirmed_test)^2))
mean(abs(pred3 - confirmed_test))
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
fit1 <- Arima(confirmed, order = c(0, 1, 2), seasonal = c(0, 1, 1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
```{r}
fit2 <- Arima(confirmed, order = c(2, 1, 2), seasonal = c(0, 0, 1))
fit2 %>% forecast(h = 48) %>% autoplot()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggfortify)
library(forecast)
df <- read.csv("ne_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
confirmed
autoplot(confirmed) +
ylab("Retail index") +
xlab("Week")
confirmed %>% diff(lag = 7) %>% ggtsdisplay()
confirmed %>%
diff(lag = 7) %>%
diff() %>%
ggtsdisplay()
fit1 <- Arima(confirmed, order = c(0, 1, 2), seasonal = c(0, 1, 1))
checkresiduals(fit1)
auto.arima(confirmed, seasonal = TRUE)
fit2 <- Arima(confirmed, order = c(2, 1, 2), seasonal = c(0, 0, 1))
checkresiduals(fit2)
df_test <- read.csv("ne_test.csv", row.names = 1)
confirmed_test <- ts(df_test$confirmed, start = c(31, 6), frequency = 7)
confirmed_test
log_confirmed <- log(confirmed + 1)
auto.arima(log_confirmed, seasonal = TRUE)
fit3 <- arima(log_confirmed, order = c(2, 2, 2))
checkresiduals(fit3)
df <- read.csv("s_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
confirmed <- ts(df$confirmed, start = c(1, 4), frequency = 7)
df <- read.csv("s_train.csv", row.names = 1)
df <- read.csv("s_train.csv", row.names = 1)
df <- read.csv("s_train.csv", row.names = 1)
confirmed <- ts(df$confirmed, start = c(4, 4), frequency = 7)
df
df <- read.csv("ne_train.csv", row.names = 1)
log_confirmed <- log(confirmed + 1)
df_south = read.csv("s_train.csv", row.names = 1)
df_south_test = read.csv("s_test.csv", row.names = 1)
confirmed_south <- ts(df_south$confirmed, start = c(4, 4), frequency = 7)
df_south
confirmed_south
df_south_test
confirmed_south <- ts(df_south$confirmed, start = c(1, 4), frequency = 7)
df_south = read.csv("s_train.csv", row.names = 1)
confirmed_south <- ts(df_south$confirmed, start = c(1, 1), frequency = 7)
df_south = read.csv("s_train.csv", row.names = 1)
df_south_test = read.csv("s_test.csv", row.names = 1)
confirmed_south <- ts(df_south$confirmed, start = c(1, 4))
setwd("~/DataspellProjects/LTV_DataSci_Capstone_Project/models/ARIMA/vs_ARIMA")
s_train.csv
df_south = read.csv("s_train.csv", row.names = 1)
df_south_test = read.csv("s_test.csv", row.names = 1)
confirmed_south <- ts(df_south$covid_19_confirmed_cases, start = c(1, 4), frequency = 7)
confirmed_south[,'confirmed'] <- df_south$covid_19_confirmed_cases
confirmed_south[,'confirmed']
df_south$covid_19_confirmed_cases
auto.arima(confirmed_south, seasonal = TRUE)
auto.arima(confirmed_south, seasonal = TRUE)
auto.arima(confirmed_south, seasonal = TRUE)
auto.arima(confirmed_south, seasonal = TRUE)
fit_south <- Arima(confirmed_south, order = c(0, 1, 1), seasonal = c(0, 1, 1))
checkresiduals(fit_south)
confirmed_south_test <- ts(df_south_test$confirmed, start = c(31, 6), frequency = 7)
pred_south = data.frame(forecast(fit_south, h = 48))[, 1]
# RMSE
mean(abs(pred_south - confirmed_south_test))
